{"version":3,"sources":["components/create-table/create-table.component.jsx","components/yang-table/yang-table.component.jsx","components/insert-value/insert-value.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["CreateTable","onCreate","useState","sizeBox","updateSize","missingBox","updateMissing","type","value","onChange","event","parseInt","target","min","max","colSpan","onClick","YangTable","size","yang","missingValue","console","log","className","length","map","row","i","col","j","style","height","width","InsertValue","onInsert","missing","insertBox","updateInsert","disabled","App","updateYang","yangSize","updateYangSize","yangMissing","updateYangMissing","willBeMissing","cannotBeMissing","number","yangTable","ii","jj","undefined","miss","infinites","quantFinite","quantInfinite","m","n","minNumber","Math","floor","random","k","l","MAXIMUM","greatYangTable","insertValue","allowed","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a7da3b1f.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst CreateTable = ({onCreate}) => {\r\n\r\n    const [sizeBox, updateSize] = useState(6);\r\n    const [missingBox, updateMissing] = useState(5);\r\n\r\n    const changeSizeBox = (event) => {\r\n        if (parseInt(event.target.value)>10 || !typeof event.target.value === 'number')\r\n            updateSize(10);\r\n        else\r\n            updateSize(event.target.value);\r\n        // console.log(sizeBox)\r\n    }\r\n    const changeMissingBox = (event) => {\r\n        if (parseInt(event.target.value) > parseInt(sizeBox*sizeBox)) {\r\n            updateMissing(sizeBox*sizeBox);\r\n        }\r\n        else if (parseInt(event.target.value) < 0) {\r\n            updateMissing(0);\r\n        }\r\n        else\r\n            updateMissing(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <h4>Create table</h4>\r\n            </div>\r\n            <table>\r\n                <tbody>\r\n                <tr>\r\n                    <td>The size:</td>\r\n                    <td><input type=\"number\" value={sizeBox} onChange={changeSizeBox} min={1} max={10} /></td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Missing:</td>\r\n                    <td><input type=\"number\" value={missingBox} onChange={changeMissingBox} min={0} max={sizeBox*sizeBox}/></td>\r\n                </tr>\r\n                <tr>\r\n                    <td colSpan={2}><input type=\"button\" value=\"create!\" onClick={()=>onCreate(sizeBox,missingBox)}/></td>\r\n                </tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\n// Size: <input type=\"text\" value={sizeBox} onChange={(e) => updateSize(e.target.value)} />\r\n\r\nexport default CreateTable;","import './yang-table.styles.css';\r\n\r\nconst YangTable = ({ size, yang, missingValue }) => {\r\n    console.log(yang);\r\n    return (\r\n        <div className=\"yang-div\">\r\n            <table className=\"yang-table\">\r\n                <tbody>\r\n                    { \r\n                    (yang.length) ?\r\n                    yang[0].map((row, i) => (\r\n                        <tr key={i}>\r\n                            {\r\n                            row.map((col, j) => (\r\n                                <td style={{height:'23px',width:'23px'}}key={i*10+j}>{(col!==missingValue) ? col : ' '}</td>\r\n                            ))\r\n                            }\r\n                        </tr>\r\n                    ))\r\n                    : <tr><td style={{width:'200px', height:'200px'}}>Yang Table!</td></tr>\r\n                    }\r\n\r\n                </tbody>\r\n            </table>\r\n\r\n            {/* {\r\n            yang[0].map((row, i) => (\r\n                <span key={i}>\r\n                    {\r\n                    row.map((col, j) => (\r\n                        <div key={i*10+j} style={{gridColumn:`${i+1}`, gridRow:`${j+1}`}}> a{col}a </div>\r\n                    ))\r\n                    }\r\n                </span>\r\n            ))\r\n            } */}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default YangTable;\r\n\r\n// style={{gridColumn:`1`, gridRow:`${hourBegin}`}}\r\n\r\n/* <table>\r\n<tbody>\r\n<tr><td></td><td></td><td></td></tr>\r\n{\r\nyang.map((row, i) => (\r\n    <tr key={i}>\r\n        {\r\n        row.map((col, j) => (\r\n            <td key={10+i*10+j}>a{col} a {j} b {i}</td>\r\n        ))\r\n        }\r\n    </tr>\r\n))\r\n}\r\n</tbody>      \r\n</table> */\r\n","import React, { useState } from 'react';\r\n\r\nconst InsertValue = ({ onInsert, size, missing, yang }) => {\r\nconsole.log(missing)\r\n    const [insertBox, updateInsert] = useState(50);\r\n\r\n    const disabled = (parseInt(missing) === 0) ? \"disabled\" : \"\";\r\n\r\n    const changeInsertBox = (event) => {\r\n        updateInsert(event.target.value);\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <h4>Insert value</h4>\r\n            </div>\r\n            <div>Value: <input type=\"number\" value={insertBox} onChange={changeInsertBox} disabled={disabled} min={1} max={100} /></div>\r\n            <div><input type=\"button\" value=\"update\" onClick={()=>onInsert(yang,insertBox,missing)} disabled={disabled} /></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InsertValue;","import React, { useState } from 'react';\nimport './App.css';\nimport CreateTable from './components/create-table/create-table.component';\nimport YangTable from './components/yang-table/yang-table.component';\nimport InsertValue from './components/insert-value/insert-value.component';\n\nfunction App() {\n\n\n\tconst [yang, updateYang] = useState([]);\n\tconst [yangSize, updateYangSize] = useState();\n\tconst [yangMissing, updateYangMissing] = useState(0);\n\tconst MAXIMUM = 100;\n\tconst MISSING = MAXIMUM + 1; //infinite (missing)\n\n\tconst randomizeBoolean = (miss,infinites) => {\n\t\tif (Math.floor(Math.random() * (miss-infinites)) === 0)\n\t\t\treturn true;\n\t\treturn false;\t\t\t\n\t}\n\n\tconst create = (size, missing) => {\n\t\tif (size>10)\n\t\t\tsize = 10;\n\t\tconst yangTable = [];\n\t\tfor(var ii=0; ii<size; ii++) {\n\t\t\tyangTable[ii] = [];\n\t\t\tfor(var jj=0; jj<size; jj++) {\n\t\t\t\tyangTable[ii][jj] = undefined;\n\t\t\t}\n\t\t}\n\t\tlet willBeMissing;\n\t\tlet cannotBeMissing;\n\t\tlet number;\n\t\tlet quantFinite = 0;\n\t\tlet quantInfinite = 0;\n\t\tlet m = size;\n\t\tlet n = size;\n\t\tlet i = 0;\n\t\tlet j;\n\t\tlet minNumber = 1;\n\t\twhile (i < m) {\n\t\t\tj = 0;\n\t\t\twhile (j < n) {\n\t\t\t\t//first we check if the square is supposed to be infinite:\n\t\t\t\twillBeMissing = false;\n\t\t\t\tif (quantFinite === size*size-missing) {\n\t\t\t\t\twillBeMissing = true;\n\t\t\t\t}\n\t\t\t\tif (willBeMissing === false) {\n\t\t\t\t\t//we check is the square is allowed to have infinite:\n\t\t\t\t\tcannotBeMissing = false;\n\t\t\t\t\tif ((m-i)*(n-j) > missing-quantInfinite) {\n\t\t\t\t\t\tcannotBeMissing = true; //can't be infinite\n\t\t\t\t\t}\n\t\t\t\t\t//if the square is allowed to be infinite, we randomize whether it will be or not:\n\t\t\t\t\tif (cannotBeMissing === false) {\n\t\t\t\t\t\twillBeMissing = randomizeBoolean(missing,quantInfinite);\n\t\t\t\t\t}\n\t\t\t\t\t//if it's not infinite, we randomize the number:\n\t\t\t\t\tif (willBeMissing === false) {\n\t\t\t\t\t\tif (i>0 && j>0) {\n\t\t\t\t\t\t\tminNumber = Math.max(yangTable[i-1][j], yangTable[i][j-1]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if(i>0) {\n\t\t\t\t\t\t\tminNumber = yangTable[i-1][j];\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if(j>0) {\n\t\t\t\t\t\t\tminNumber = yangTable[i][j-1];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//the part of *(i+1)*(j+1) / (size*size) was added in order to make the numbers more friendly\n\t\t\t\t\t\tnumber = Math.floor(Math.random() * (MAXIMUM-minNumber) * (i+1)*(j+1) / (size*size)) + minNumber;\n\t\t\t\t\t\tyangTable[i][j] = number;\n\t\t\t\t\t\tquantFinite++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (willBeMissing === true) { //don't change it to else because the variable could also change in the if statement.\n\t\t\t\t\t//we fill it and all the below and right with infinites\n\t\t\t\t\tfor (let k=i; k<m; k++) {\n\t\t\t\t\t\tfor (let l=j; l<n; l++) {\n\t\t\t\t\t\t\tyangTable[k][l] = MISSING;\n\t\t\t\t\t\t\tquantInfinite++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//we reduce the table (we discard all the right part)\n\t\t\t\t\tn = j; //right part discarded\n\t\t\t\t}\n\t\t\t\tj++;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\n\t\tconsole.log(yangTable);\n\n\t\tupdateYangSize([size]);\n\t\t(parseInt(missing) > -1) ? updateYangMissing([missing]) : updateYangMissing([0]);\n\t\tconsole.log(missing)\n\t\tupdateYang([yangTable]);\t\n\t\t\n\t}\n\n\tconst insert = (greatYangTable,insertValue,missing) => {\n\t\tconst yangTable = greatYangTable[0];\n\t\tlet i = yangSize-1;\n\t\tlet j = yangSize-1;\n\t\tlet k;\n\t\tlet l;\n\t\tyangTable[i][j] = insertValue;\n\t\tlet allowed = false;\n\t\twhile (allowed===false) {\n\t\t\tif (i!==0 && j!==0) {\n\t\t\t\tif (yangTable[i-1][j] > yangTable[i][j-1]) {\n\t\t\t\t\tk = i-1;\n\t\t\t\t\tl = j;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tk = i;\n\t\t\t\t\tl = j-1;\n\t\t\t\t}\n\t\t\t\tif (yangTable[k][l] > yangTable[i][j]) {\n\t\t\t\t\tyangTable[i][j] = yangTable[k][l];\n\t\t\t\t\tyangTable[k][l] = insertValue;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tallowed = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i!==0) {\n\t\t\t\tif (yangTable[i-1][j] > yangTable[i][j]) {\n\t\t\t\t\tyangTable[i][j] = yangTable[i-1][j];\n\t\t\t\t\tyangTable[i-1][j] = insertValue;\n\t\t\t\t\tk = i-1; //necessary for below\n\t\t\t\t\tl = j;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tallowed = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (j!==0) {\n\t\t\t\tif (yangTable[i][j-1] > yangTable[i][j]) {\n\t\t\t\t\tyangTable[i][j] = yangTable[i][j-1];\n\t\t\t\t\tyangTable[i][j-1] = insertValue;\n\t\t\t\t\tk = i; //necessary for below\n\t\t\t\t\tl = j-1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tallowed = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tallowed = true;\n\t\t\t}\n\t\t\tif (k === i-1)\n\t\t\t\ti--;\n\t\t\tif (l === j-1)\n\t\t\t\tj--;\n\t\t\t\n\t\t\tupdateYangMissing(missing-1);\n\t\t\tupdateYang([yangTable]);\n\n\t\t}\n\t}\n\n    //useEffect(() => {\n        //lo recorro si bien me devuelve uno solo (porque quizas no me devuelve ninguno, era mucho lio usar solo filter)\n        //const selected = sections.filter((section) => location.pathname.search(section.title.replace(/ /g,\"-\")) !== -1) \n        //if (selected.length>0) {\n        //    setCurrentPost(selected[0].id);\n        //} else {\n        //    setCurrentPost(-1);\n        //}\n    //},[yang]);\n\t\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<header>\n\t\t\t\t<h1>Yang Table</h1>\n\t\t\t</header>\n\t\t\t<main>\n\t\t\t\t<div className=\"instructions\">\n\t\t\t\t\t<CreateTable onCreate={create} className=\"instructions-create\"/>\n\t\t\t\t\t<YangTable size={yangSize} yang={yang} missingValue={MISSING} />\n\t\t\t\t\t<InsertValue onInsert={insert} size={yangSize} yang={yang} missing={yangMissing} className=\"instructions-insert\" />\n\t\t\t\t</div>\n\t\t\t\t<div className=\"aclarations\">\n\t\t\t\t\tThe create method has a running time of O(n), but the insert method has a running time of O(lgn)!\n\t\t\t\t\talthough at the end of the day react udpates the state and creates the array from scratch but that's another issue :-)\n\t\t\t\t</div>\n\t\t\t</main>\n\t\t\t<footer>\n\t\t\t\tAdrian Laufer\n\t\t\t</footer>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}